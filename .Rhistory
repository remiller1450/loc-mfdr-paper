df <- data.frame(Sample = 1:150, Estimate = phats[1:150], L = phats[1:150]- 1.96*sqrt(phats[1:150]*(1-phats[150])/20), U = phats[1:150] + 1.96*sqrt(phats[150]*(1-phats[150])/20))
df$Coverage = ifelse(df$L > 0.415 | df$U < 0.415, "Misses p", "Contains p")
ggplot(df, aes(x = Sample, y = Estimate)) +
geom_point(size = 0.6) +
geom_errorbar(aes(ymax = U, ymin = L, color = Coverage)) +
geom_hline(yintercept = 0.415, col = "skyblue", lwd = 1.3, lty = 1) + scale_color_manual(values = c("black", "red"))
ss <- read.csv(file = "LectureData/ClassSurvey.csv")
#sum(ss$Q5..Reason == "Fun")/nrow(ss)
set.seed(1234)
nsamp <- 2500
phats <- numeric(nsamp)
for(i in 1:nsamp){
samp <- ss[sample(1:nrow(ss), 20),]
phats[i] <- sum(samp$Q5..Reason == "Fun")/nrow(samp)
}
hist(phats, xlab = expression(hat(p)), main = expression(paste("Sampling Distribution of ", hat(p))), breaks = 15)
curve(dnorm(x, mean=mean(phats), sd=sqrt(mean(phats)*(1-mean(phats))/20)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
ss <- read.csv(file = "LectureData/ClassSurvey.csv")
#sum(ss$Q5..Reason == "Fun")/nrow(ss)
set.seed(1234)
nsamp <- 2500
phats <- numeric(nsamp)
for(i in 1:nsamp){
samp <- ss[sample(1:nrow(ss), 20),]
phats[i] <- sum(samp$Q5..Reason == "Fun")/nrow(samp)
}
hist(phats, xlab = expression(hat(p)), main = expression(paste("Sampling Distribution of ", hat(p))), breaks = 15)
curve(dnorm(x, mean=mean(phats), sd=sqrt(mean(phats)*(1-mean(phats))/20)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
ss <- read.csv(file = "LectureData/ClassSurvey.csv")
#sum(ss$Q5..Reason == "Fun")/nrow(ss)
set.seed(1234)
nsamp <- 2500
phats <- numeric(nsamp)
for(i in 1:nsamp){
samp <- ss[sample(1:nrow(ss), 20),]
phats[i] <- sum(samp$Q5..Reason == "Fun")/nrow(samp)
}
hist(phats, xlab = expression(hat(p)), main = expression(paste("Sampling Distribution of ", hat(p))), breaks = 15, prob = TRUE)
curve(dnorm(x, mean=mean(phats), sd=sqrt(mean(phats)*(1-mean(phats))/20)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
ss <- read.csv(file = "LectureData/ClassSurvey.csv")
#sum(ss$Q5..Reason == "Fun")/nrow(ss)
set.seed(1234)
nsamp <- 2500
phats <- numeric(nsamp)
for(i in 1:nsamp){
samp <- ss[sample(1:nrow(ss), 20),]
phats[i] <- sum(samp$Q5..Reason == "Fun")/nrow(samp)
}
hist(phats, xlab = expression(hat(p)), main = expression(paste("Sampling Distribution of ", hat(p))), breaks = 18, prob = TRUE)
curve(dnorm(x, mean=mean(phats), sd=sqrt(mean(phats)*(1-mean(phats))/20)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
ss <- read.csv(file = "LectureData/ClassSurvey.csv")
#sum(ss$Q5..Reason == "Fun")/nrow(ss)
set.seed(1234)
nsamp <- 2500
phats <- numeric(nsamp)
for(i in 1:nsamp){
samp <- ss[sample(1:nrow(ss), 20),]
phats[i] <- sum(samp$Q5..Reason == "Fun")/nrow(samp)
}
hist(phats, xlab = expression(hat(p)), main = expression(paste("Sampling Distribution of ", hat(p))), breaks = 15, prob = TRUE)
curve(dnorm(x, mean=mean(phats), sd=sqrt(mean(phats)*(1-mean(phats))/20)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
mean(phats)
sqrt(.415*(1-.415)/20)
legend("topright", legend = c("N(0.415, 0.110"), col = "darkblue", lwd = 2)
ss <- read.csv(file = "LectureData/ClassSurvey.csv")
#sum(ss$Q5..Reason == "Fun")/nrow(ss)
set.seed(1234)
nsamp <- 2500
phats <- numeric(nsamp)
for(i in 1:nsamp){
samp <- ss[sample(1:nrow(ss), 20),]
phats[i] <- sum(samp$Q5..Reason == "Fun")/nrow(samp)
}
hist(phats, xlab = expression(hat(p)), main = expression(paste("Sampling Distribution of ", hat(p))), breaks = 15, prob = TRUE)
curve(dnorm(x, mean=.415, sd=sqrt(.415*(1-.415)/20)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
legend("topright", legend = c("N(0.415, 0.110"), col = "darkblue", lwd = 2)
set.seed(123456)
samp.sizes <- 2:30
reps <- 1000
cover <- matrix(NA, length(samp.sizes), reps)
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
for(j in 1:reps){
ndat <- rnorm(n, 0, sd = 1)
xb <- mean(ndat)
s <- sd(ndat)
lcl <- xb - 1.96*(s/sqrt(n))
ucl <- xb + 1.96*(s/sqrt(n))
cover[i,j] <- (0 <= ucl & 0 >= lcl)
}
}
coverage <- rowSums(cover)/reps
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", mu)), main = "95% CIs using 's' in the Normal approximation SE", ylim = c(0.7, 1))
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
#install.packages("kableExtra")
library(kableExtra)
library(ggplot2)
set.seed(123456)
samp.sizes <- 2:30
reps <- 1000
cover <- matrix(NA, length(samp.sizes), reps)
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
for(j in 1:reps){
ndat <- rnorm(n, 0, sd = 1)
xb <- mean(ndat)
s <- sd(ndat)
lcl <- xb - 1.96*(s/sqrt(n))
ucl <- xb + 1.96*(s/sqrt(n))
cover[i,j] <- (0 <= ucl & 0 >= lcl)
}
}
coverage <- rowSums(cover)/reps
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", mu)), main = "95% CI coverage by sample size", ylim = c(0.7, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
set.seed(123456)
samp.sizes <- 2:30
reps <- 1000
cover <- matrix(NA, length(samp.sizes), reps)
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
for(j in 1:reps){
ndat <- rnorm(n, 0, sd = 1)
xb <- mean(ndat)
s <- sd(ndat)
lcl <- xb - 1.96*(s/sqrt(n))
ucl <- xb + 1.96*(s/sqrt(n))
cover[i,j] <- (0 <= ucl & 0 >= lcl)
}
}
coverage <- rowSums(cover)/reps
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", mu)), main = "95% CI coverage by sample size", ylim = c(0.6, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
set.seed(123456)
samp.sizes <- 2:30
reps <- 1000
cover <- matrix(NA, length(samp.sizes), reps)
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
for(j in 1:reps){
ndat <- rnorm(n, 0, sd = 1)
xb <- mean(ndat)
s <- sd(ndat)
lcl <- xb - 1.96*(s/sqrt(n))
ucl <- xb + 1.96*(s/sqrt(n))
cover[i,j] <- (0 <= ucl & 0 >= lcl)
}
}
coverage <- rowSums(cover)/reps
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", mu)), main = "95% CI coverage by sample size", ylim = c(0.65, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
set.seed(123456)
samp.sizes <- 2:30
reps <- 1000
cover <- matrix(NA, length(samp.sizes), reps)
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
for(j in 1:reps){
ndat <- rnorm(n, 0, sd = 1)
xb <- mean(ndat)
s <- sd(ndat)
lcl <- xb - 1.96*(s/sqrt(n))
ucl <- xb + 1.96*(s/sqrt(n))
cover[i,j] <- (0 <= ucl & 0 >= lcl)
}
}
coverage <- rowSums(cover)/reps
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", mu)), main = "95% CI coverage by sample size (Normal approx, one mean)", ylim = c(0.65, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
?rbinom
p <- rbinom(1000, size = n, prob = .5)
p
samp.sizes <- 2:30
cover <- numeric(length(samp.sizes))
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
ph <- rbinom(1000, size = n, prob = .5)/n
lcl <- ph - 1.96*sqrt(ph*(1-ph)/n)
ucl <- ph + 1.96*sqrt(ph*(1-ph)/n)
cover[i] <- (.5 <= ucl & .5 >= lcl)
}
coverage <- rowSums(cover)/reps
cover
lcl
(.5 <= ucl & .5 >= lcl)
coverage <- cover/1000
coverage
cover
cover[i] <- sum(as.numeric(.5 <= ucl & .5 >= lcl))
set.seed(123456)
samp.sizes <- 2:30
cover <- numeric(length(samp.sizes))
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
ph <- rbinom(1000, size = n, prob = .5)/n
lcl <- ph - 1.96*sqrt(ph*(1-ph)/n)
ucl <- ph + 1.96*sqrt(ph*(1-ph)/n)
cover[i] <- sum(as.numeric(.5 <= ucl & .5 >= lcl))
}
coverage <- cover/1000
coverage
set.seed(123456)
samp.sizes <- 2:30
cover <- numeric(length(samp.sizes))
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
ph <- rbinom(1000, size = n, prob = .5)/n
lcl <- ph - 1.96*sqrt(.5*(1-.5)/n)
ucl <- ph + 1.96*sqrt(.5*(1-.5)/n)
cover[i] <- sum(as.numeric(.5 <= ucl & .5 >= lcl))
}
coverage <- cover/1000
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", mu)), main = "95% CI coverage by sample size (Normal approx, one mean)", ylim = c(0.65, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
set.seed(123456)
samp.sizes <- 2:30
cover <- numeric(length(samp.sizes))
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
ph <- rbinom(1000, size = n, prob = .5)/n
lcl <- ph - 1.96*sqrt(.5*(1-.5)/n)
ucl <- ph + 1.96*sqrt(.5*(1-.5)/n)
cover[i] <- sum(as.numeric(.5 <= ucl & .5 >= lcl))
}
coverage <- cover/1000
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", "p")), main = "95% CI coverage by sample size (Normal approx, one proportion)", ylim = c(0.65, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
set.seed(123456)
samp.sizes <- 2:30
cover <- numeric(length(samp.sizes))
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
ph <- rbinom(1000, size = n, prob = .5)/n
lcl <- ph - 1.96*sqrt(ph*(1-ph)/n)
ucl <- ph + 1.96*sqrt(ph*(1-ph)/n)
cover[i] <- sum(as.numeric(.5 <= ucl & .5 >= lcl))
}
coverage <- cover/1000
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", "p")), main = "95% CI coverage by sample size (Normal approx, one proportion)", ylim = c(0.65, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
set.seed(123456)
samp.sizes <- 2:30
cover <- numeric(length(samp.sizes))
for(i in 1:length(samp.sizes)){
n <- samp.sizes[i]
ph <- rbinom(1000, size = n, prob = .5)/n
lcl <- ph - 1.96*sqrt(ph*(1-ph)/n)
ucl <- ph + 1.96*sqrt(ph*(1-ph)/n)
cover[i] <- sum(as.numeric(.5 <= ucl & .5 >= lcl))
}
coverage <- cover/1000
plot(samp.sizes, coverage, type = 'l', col = "skyblue",lwd = 3, xlab = "Sample Size (n)", ylab = expression(paste("Proportion containing ", " ", "p")), main = "95% CI coverage by sample size (Normal approx, one proportion)", ylim = c(0.65, 1))
points(samp.sizes, coverage)
abline(h = 0.95, lty = 2, lwd = 2, col = "darkgrey")
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(kableExtra)
knitr::include_graphics("Figs/boot2.png")
data("income")
?income
head(income)
table(income$MARITAL.STATUS)
table(income$HOME.TYPE)
dim(income)
str(income)
table(income$HOUSEHOLD.SIZE)
levels(income$HOUSEHOLD.SIZE) <- 1:9
table(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE <- as.numeric(income$HOUSEHOLD.SIZE)
table(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9] <- sample(c(9,10,11,12),
size = length(income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9]),
prob = c(.6,.25,.1,.05))
data("income")
set.seed(12345)
levels(income$HOUSEHOLD.SIZE) <- 1:9
income$HOUSEHOLD.SIZE <- as.numeric(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9] <- sample(c(9,10,11,12),
size = length(income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9]),
prob = c(.6,.25,.1,.05), replace = TRUE)
sample(c(9,10,11,12),
size = length(income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9]),
prob = c(.6,.25,.1,.05), replace = TRUE)
income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9]
data("income")
set.seed(12345)
levels(income$HOUSEHOLD.SIZE) <- 1:9
income$HOUSEHOLD.SIZE <- as.numeric(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9]
income$HOUSEHOLD.SIZE == 9
which(income$HOUSEHOLD.SIZE == 9)
income$HOUSEHOLD.SIZE[which(income$HOUSEHOLD.SIZE == 9)]
data("income")
set.seed(12345)
levels(income$HOUSEHOLD.SIZE) <- 1:9
income$HOUSEHOLD.SIZE <- as.numeric(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE[which(income$HOUSEHOLD.SIZE == 9)] <- sample(c(9,10,11,12),
size = length(income$HOUSEHOLD.SIZE[income$HOUSEHOLD.SIZE == 9]),
prob = c(.6,.25,.1,.05), replace = TRUE)
data("income")
set.seed(12345)
levels(income$HOUSEHOLD.SIZE) <- 1:9
income$HOUSEHOLD.SIZE <- as.numeric(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE[which(income$HOUSEHOLD.SIZE == 9)] <- sample(c(9,10,11,12),
size = length(income$HOUSEHOLD.SIZE[
which(income$HOUSEHOLD.SIZE == 9)]),
prob = c(.6,.25,.1,.05), replace = TRUE)
table(income$HOUSEHOLD.SIZE)
table(income$UNDER18)
levels(income$UNDER18) <- 0:9
income$UNDER18 <- as.numeric(income$UNDER18)
table(income$UNDER18)
data("income")
set.seed(12345)
levels(income$HOUSEHOLD.SIZE) <- 1:9
income$HOUSEHOLD.SIZE <- as.numeric(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE[which(income$HOUSEHOLD.SIZE == 9)] <- sample(c(9,10,11,12),
size = length(income$HOUSEHOLD.SIZE[
which(income$HOUSEHOLD.SIZE == 9)]),
prob = c(.6,.25,.1,.05), replace = TRUE)
levels(income$UNDER18) <- 0:9
income$UNDER18 <- as.numeric(as.character(income$UNDER18))
table(income$UNDER18)
table(income$SEX)
sum(complete.cases(income))
income <- income[complete.cases(income),]
data("income")
income <- income[complete.cases(income),]
set.seed(12345)
levels(income$HOUSEHOLD.SIZE) <- 1:9
income$HOUSEHOLD.SIZE <- as.numeric(income$HOUSEHOLD.SIZE)
income$HOUSEHOLD.SIZE[which(income$HOUSEHOLD.SIZE == 9)] <- sample(c(9,10,11,12),
size = length(income$HOUSEHOLD.SIZE[
which(income$HOUSEHOLD.SIZE == 9)]),
prob = c(.6,.25,.1,.05), replace = TRUE)
levels(income$UNDER18) <- 0:9
income$UNDER18 <- as.numeric(as.character(income$UNDER18))
table(income$SEX)
table(income$UNDER18)
table(income$HOUSEHOLD.SIZE)
table(income$MARITAL.STATUS)
table(income$HOUSEHOLDER)
table(income$DUAL.INCOMES)
table(income$LANGAUGE)
table(income$LANGUAGE)
table(income$OCCUPATION)
table(income$HOUSEHOLDER)
table(income$HOUSEHOLDER, income$INCOME)
table(income$HOUSEHOLDER, income$OCCUPATION)
table(income$HOUSEHOLDER, income$EDUCATION)
table(income$HOUSEHOLDER, income$HOME.TYPE)
table(income$EDUCATION, income$HOME.TYPE)
table(income$AGE, income$HOME.TYPE)
infheart <- read.delim('https://s3.amazonaws.com/pbreheny-data-sets/infant-heart.txt')
infheart
infheart %>% group_by(Treatment) %>% summarize(m1 = mean(PDI), m2 = mean(MDI))
cor(infheart$PDI, infheart$MDI)
infheart %>% group_by(Treatment) %>% summarize(m1 = mean(PDI), m2 = mean(MDI), c = cor(PDI, MDI))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
install.packages("gapminder")
plot_ly(data = AmesHousing, type = "scatter", mode = "markers", x = ~GrLivArea, y = ~SalePrice, color = ~BldgType)
library(plotly)
library(ggplot2)
AmesHousing <- read.csv("https://raw.githubusercontent.com/ds4stats/r-tutorials/master/data-viz/data/AmesHousing.csv")
my_ggplot <- ggplot(data=AmesHousing) + geom_point(mapping= aes(x=GrLivArea, y=SalePrice))
ggplotly(my_ggplot)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers", x = ~GrLivArea, y = ~SalePrice, color = ~BldgType)
plot_ly(data = AmesHousing) %>%
add_trace(type = "scatter", mode = "markers", x = ~GrLivArea, y = ~SalePrice, color = ~BldgType) %>%
add_lines(x = ~GrLivArea, y = ~SalePrice, color = ~BldgType)
plot_ly(data = AmesHousing) %>%
add_trace(type = "scatter", mode = "markers", x = ~GrLivArea, y = ~SalePrice, color = ~BldgType) %>%
add_lines(x = ~GrLivArea, y = ~fitted(loess(SalePrice ~ GrLivArea)), color = ~BldgType)
plot_ly(data = AmesHousing) %>%
add_trace(type = "scatter", mode = "markers", x = ~GrLivArea, y = ~SalePrice, color = ~BldgType) %>%
add_lines(x = ~GrLivArea, y = ~SalePrice, color = ~BldgType)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType,
text = ~PID)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType,
text = ~paste0("This home was built in: ", YearBuilt, "<br> It was last sold in: ", YrSold))
plot_ly(data = AmesHousing, type = "scatter3d", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, z = ~OverallQual)
states <- read.csv("https://remiller1450.github.io/data/state_pops.csv")
library(tidyr)
library(stringr)
library(forcats)
states_long <- gather(states, key = "Year", value = "Population", 2:ncol(states))
states_long$Year <- str_replace(string = states_long$Year, pattern = "X", replace = "")
states_long$State <- str_replace(string = states_long$State, pattern = ".", replace = "")
plot_ly(data = states_long, type = "bar",
x = ~fct_reorder(State, Population), y = ~Population, frame = ~Year)
## Load the data
states <- read.csv("https://remiller1450.github.io/data/state_pops.csv")
## Tidy the data
states_long <- gather(states, key = "Year", value = "Population", 2:ncol(states))
states_long$Year <- str_replace(string = states_long$Year, pattern = "X", replace = "")
states_long$State <- str_replace(string = states_long$State, pattern = ".", replace = "")
## Plotly animation
plot_ly(data = states_long, type = "bar",
x = ~fct_reorder(State, Population), y = ~Population, frame = ~Year) %>%
animation_opts(
1000, easing = "elastic", redraw = FALSE
)
## Load the data
states <- read.csv("https://remiller1450.github.io/data/state_pops.csv")
## Tidy the data
states_long <- gather(states, key = "Year", value = "Population", 2:ncol(states))
states_long$Year <- str_replace(string = states_long$Year, pattern = "X", replace = "")
states_long$State <- str_replace(string = states_long$State, pattern = ".", replace = "")
## Plotly animation
plot_ly(data = states_long, type = "bar",
x = ~fct_reorder(State, Population), y = ~Population, frame = ~Year) %>%
animation_opts( easing = "elastic", redraw = FALSE)
## Load the data
states <- read.csv("https://remiller1450.github.io/data/state_pops.csv")
## Tidy the data
states_long <- gather(states, key = "Year", value = "Population", 2:ncol(states))
states_long$Year <- str_replace(string = states_long$Year, pattern = "X", replace = "")
states_long$State <- str_replace(string = states_long$State, pattern = ".", replace = "")
## Plotly animation
plot_ly(data = states_long, type = "bar",
x = ~fct_reorder(State, Population), y = ~Population, frame = ~Year) %>%
animation_opts( easing = "elastic")
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType,
text = ~PID, frame = ~YearBuilt)
AmesHousing$YearBuilt
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType, frame = ~round(YearBuilt,3))
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType, frame = ~round(YearBuilt,-1))
AmesHousing
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType, frame = ~round(YearBuilt,-1)) %>%
animation_opts(1000, easing = "elastic", redraw = FALSE)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType, frame = ~round(YearBuilt,-1)) %>%
animation_opts(easing = "elastic", redraw = FALSE)
?animation_opts
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, color = ~BldgType, frame = ~round(YearBuilt,-1)) %>%
animation_opts(frame = 1000, easing = "elastic", redraw = FALSE)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~SalePrice, frame = ~round(YearBuilt,-1)) %>%
animation_opts(frame = 1000, easing = "elastic", redraw = FALSE)
head(AmesHousing)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~TotRmsAbvGrd, color = ~GarageType, frame = ~round(YearBuilt,-1)) %>%
animation_opts(frame = 1000, easing = "elastic", redraw = FALSE)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~TotRmsAbvGrd, frame = ~round(YearBuilt,-1)) %>%
animation_opts(frame = 1000, easing = "elastic", redraw = FALSE)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~TotRmsAbvGrd, frame = ~round(YearBuilt,-1),
showlegend = FALSE) %>%
animation_opts(frame = 1000, easing = "elastic", redraw = FALSE)
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~TotRmsAbvGrd, frame = ~round(YearBuilt,-1),
showlegend = FALSE) %>%
animation_opts(frame = 1000, easing = "elastic")
plot_ly(data = AmesHousing, type = "scatter", mode = "markers",
x = ~GrLivArea, y = ~TotRmsAbvGrd, frame = ~round(YearBuilt,-1),
showlegend = FALSE) %>%
animation_opts(frame = 1000, easing = "elastic", redraw = FALSE)
shootings <- read.csv('https://remiller1450.github.io/data/MassShootings.csv')
head(shootings)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
Map <- leaflet(WorldCountry) %>% addTiles() %>%
addPolygons(
fillColor = pal(CountryHappy$LifeExpectancy),
weight = 2,
opacity = 1,
color = "white",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE))
myLabels <- paste("<strong>", CountryHappy$Name, "</strong>", "<br/>",
"Life Expectancy:", CountryHappy$LifeExpectancy)
library(leaflet)    # The map-making package
library(geojsonio)  # A package for geographic and spatial data
install.packages("geojsonio")
library(leaflet)    # The map-making package
library(geojsonio)  # A package for geographic and spatial data
install.packages('dplyr')
library(geojsonio)  # A package for geographic and spatial data
install.pacakges('dplyr')
install.packages('dplyr')
install.packages('dplyr')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
install.packages('dplyr')
install.packages("dplyr")
library(geojsonio)  # A package for geographic and spatial data
